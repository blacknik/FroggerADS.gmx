<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>icoLevel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set variables
background_colour = global.c_sky;
distance = 0; //distance travelled (in pixels)
grid_width = sprite_get_width(sprLevelChunks); //width &amp; height of level grids
grid_height = sprite_get_height(sprLevelChunks);
tile_size = 16;
next_x = 0;
next_y = 0;
destroy_timer = room_speed;

///This is the file which stores all the data
///for the "chunks" which make up the level.
filename = "grids.ini";
if (!file_exists(filename))
{
    var msg = filename+" does not exist! This file is required and should be in the 'included files'.##"+
                filename+" is generated by The GridCreator Application stores all the grids which make up the level.";
    show_message(msg);
    game_end();
}

//get total number of grids from ini file
ini_open(filename);
total_grids = ini_read_real("grids", "total", 0);
ini_close();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set block &amp; entity values
v_ground = c_black;
v_platform = c_fuchsia;
v_block = c_purple;
v_spikes = c_aqua;
v_slope = c_red;
v_slope2 = c_blue;
v_back = c_gray;
v_enemy = c_yellow;
v_gold = make_color_rgb(255, 100, 0);
v_end = make_color_rgb(0, 255, 0);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read grids from file
ini_open(filename);
//Create a list to store our grids in
grid_list = ds_list_create();
//Loop through grid indices
for (var i = 0; i &lt; total_grids; i++)
{
    //Read grid string from ini file
    var str = ini_read_string("grids", "g"+string(i), "");
    if (str != "")
    {
        //Create a grid, and set value from string
        var grid = ds_grid_create(grid_width, grid_height);
        ds_grid_read(grid, str);
        //Add grid to grid_list
        ds_list_add(grid_list, grid);
    }
    else
    {
        //Grid ini file doesn't contain enough grids
        //or file doesn't exist
        var error = filename+" doesn't exist in AppData, or doesn't contain enough grid strings";
        show_message(error);
        game_end();
    }
}
ini_close();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create objects
instance_create(0, 0, objTransition);
instance_create(0, 0, objParallax);
instance_create(32, 64, objFrog);
var a = instance_create(0, 0, objCamera);
appodeal_show(BANNER_BOTTOM);
a.target = objFrog;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Randomize!
randomize();
if(global.runs == 0){
show_message("Welcome to the Frog Runner!

Objective:
Avoid/stomp enemies, don't hit spikes, get as far as you can.");
}       
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(!sound_isplaying(sound2))
//audio_play_sound(sound2,100,true);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create new level blocks as distance increases
if (distance+view_wview+tile_size &gt;= next_x)
{
    new_blocks = ds_list_create();
    var next_y_add = 0;
    //Get a random grid index
    if (next_x == 0) //&lt;&lt; if this is the first chunk
    {
        var i = 0;
    }
    else
    {
        var i = irandom(total_grids);
    }
    //Get the grid using the index
    var grid = grid_list[| i];
    //Loop through all grid cells,
    //adding blocks &amp; entities where necessary
    for (var yy = 0; yy &lt; grid_height; yy++)
    for (var xx = 0; xx &lt; grid_width; xx++)
    {
        //Cell x and y within the world
        var cx = next_x+xx*tile_size;
        var cy = next_y+yy*tile_size;
        //Get cell value
        var value = grid[# xx, yy];
        //Do different things depending on the value
        var a = noone;
        switch (value)
        {
            case v_gold:
                instance_create(cx, cy, obj_coin);
                break;
            case v_ground:
                a = instance_create(cx, cy, objGrassBlock);
                break;
            case v_block:
                instance_create(cx, cy, objStoneBlock);
                break;
            case v_platform:
                instance_create(cx, cy, objPlatform);
                break;
            case v_end:
                //Set the height of the next level block
                //depending on where this one ends
                var def = (grid_height/2-1) //default grid start height
                next_y_add = (yy-def)*tile_size;
                break;
            case v_slope:
                var value_right = grid[# xx+1, yy];
                if (value_right == v_ground ||
                    value_right == v_block)
                {
                    instance_create(cx, cy, objSlopeRight);
                }
                else
                {
                    instance_create(cx, cy, objSlopeLeft);
                }
                break;
            case v_slope2:
                var value_right = grid[# xx+1, yy];
                if (value_right == v_ground ||
                    value_right == v_block)
                {
                    instance_create(cx, cy, objSlopeLongRight);
                }
                else
                {
                    instance_create(cx, cy, objSlopeLongLeft);
                }
                break;
            case v_enemy:
                instance_create(cx+8, cy+16, objCrab);
                break;
            case v_spikes:
                var sp = instance_create(cx, cy, objSpikes);
                var value_down = grid[# xx, yy+1];
                if (value_down == v_ground ||
                    value_down == v_block)
                {
                    sp.sprite_index = sprSpikesBottom;
                }
                else
                {
                    var value_up = grid[# xx, yy-1];
                    if (value_up == v_ground ||
                        value_up == v_block)
                    {
                        sp.sprite_index = sprSpikesTop;
                    }
                    else
                    {
                        var value_right = grid[# xx+1, yy];
                        if (value_right == v_ground ||
                            value_right == v_block)
                        {
                            sp.sprite_index = sprSpikesRight;
                        }
                        else
                        {
                            var value_left = grid[# xx-1, yy];
                            if (value_left == v_ground ||
                                value_left == v_block)
                            {
                                sp.sprite_index = sprSpikesLeft;
                            }
                        }
                    }
                }
                break;
            case v_back:
                break;
        }
        //If a block was created, add it to the list
        if (a != noone)
        {
            ds_list_add(new_blocks, a);
        }
    }
    next_x += grid_width*tile_size;
    next_y += next_y_add;
    
    //Update new block sprites
    for (var i = 0; i &lt; ds_list_size(new_blocks); i++)
    {
        with (new_blocks[| i])
        {
            event_user(0);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy obsolete level blocks and entities
if (destroy_timer &lt; 0)
{
    destroy_timer = room_speed;
    with (objTile)
    {
        if (x &lt; view_xview-32)
        {
            instance_destroy();
        }
    }
    with (objEntity)
    {
        if (x &lt; view_xview-32)
        {
            instance_destroy();
        }
    }
}
destroy_timer--;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set distance travelled
if (global.player_alive)
{
    distance = max(distance, objPlayer.x);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw screen overlay
var xx = view_xview+8;
var yy = view_yview+8;
draw_set_font(fontSmall);
draw_set_halign(fa_left);
var str = string(round(distance/32))+"m";
draw_text_shadow(xx, yy, str, c_white);
var stra = string(global.coin)+"coin";
draw_text_shadow(xx, yy+10, stra, c_white);
draw_set_halign(fa_center);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
