<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>icoParent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objObject</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set variables
image_speed = 0;
hspeed = 0;
vspeed = 0;
gravity = 0;
friction = 0;
///Animation speed
image_spd = 0;
///Velocity &amp; limits
vx = 0;
vx_max = 5;
vy = 0;
vy_max = 10;
///Gravity
grav = 0.25;
grav_slide = 0.12;
///Friction
air_frict = 0.08;
ground_frict = 0.4;
///Acceleration
air_acc = 0.2;
ground_acc = 0.4;
///Jumping!
jump_height = 5;

///Movement
move_left = false;
move_right = false;
move_jump = false;

///Clinging
cling_left = place_meeting(x-1, y, objSolid);
cling_right = place_meeting(x+1, y, objSolid);
can_cling = false;
stick_time = 12;
stuck_time = 0;

///Misc
ground = on_ground();
facing = 1;
invincible = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create dead entity
if (x+16 &gt; view_xview) //&lt; if we're within the view
if (x-16 &lt; view_xview+view_wview)
{
    var a = instance_create(x, y, objDeadEntity);
    a.sprite_index = sprite_index;
    a.image_index = image_index;
    a.image_xscale = facing;
    var spd = random_range(1, 1.5);
    if (vx &gt; 0)
    {
        a.vx = spd;
    }
    else
    {
        a.vx = -spd;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keep GM variables constant
speed = 0;
gravity = 0;
image_speed = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Limit speed
if (vx &gt; vx_max)
{
    vx = vx_max;
}
if (vx &lt; -vx_max)
{
    vx = -vx_max;
}
if (vy &gt; vy_max)
{
    vy = vy_max;
}
if (vy &lt; -vy_max)
{
    vy = -vy_max;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
var s = objControl.game_speed;

///Check for walls &amp; ground
cling_left = place_meeting(x-1, y, objSolid);
cling_right = place_meeting(x+1, y, objSolid);
ground = on_ground();

///Check if on ground
if (ground)
{
    acc = ground_acc*s;
    frict = ground_frict*s;
}
else
{
    acc = air_acc*s;
    frict = air_frict*s;
}

///Gravity
if (!ground)
{
    if ((cling_left || cling_right) &amp;&amp; vy &gt;= 0)
    {
        //wall slide
        vy += grav_slide*s;
    }
    else
    {
        //normal gravity
        vy += grav*s;
    }
}

///Left/Right Movement
if ((cling_left || cling_right) &amp;&amp; !ground)
{
    if (move_left || move_right)
    {
        stuck_time--;
    }
    else
    {
        stuck_time = stick_time;
    }
}
else
{
    stuck_time = 0;
}
if (stuck_time &lt;= 0)
{
    if (move_left &amp;&amp; !move_right)
    {
        if (vx &gt; 0)
        {
            vx = approach(vx, 0, frict);
        }
        vx = approach(vx, -vx_max, acc);
    }
    if (move_right &amp;&amp; !move_left)
    {
        if (vx &lt; 0)
        {
            vx = approach(vx, 0, frict);
        }
        vx = approach(vx, vx_max, acc);
    }
}

///Friction
if (!move_left &amp;&amp; !move_right)
{
    vx = approach(vx, 0, frict);
}

///Jump &amp; Wall Jump
if (move_jump)
{
    if (ground)
    {
        //Ground jump
        vy = -jump_height;
        ground = false;
    }
    else
    {
        var jump_up_wall = -jump_height*1;
        var jump_off_wall = jump_height*0.6;
        if (cling_left)
        {
            //Jump off left wall
            if (move_left)
            {
                vy = jump_up_wall;
                vx = jump_off_wall*(0.8);
            }
            else
            {
                vy = -jump_height;
                vx = vx_max;
            }
        }
        else
        if (cling_right)
        {
            //Jump off right wall
            if (move_right)
            {
                vy = jump_up_wall;
                vx = -jump_off_wall*(0.8);
            }
            else
            {
                vy = -jump_height;
                vx = -vx_max;
            }
        }
        else
        {
            //Air jump (double jump)
            vy = -jump_height;
        }
    }
    move_jump = false;
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw sprite
draw_sprite_ext(sprite_index, -1, x, y, xscale*facing, yscale, image_angle, image_blend, image_alpha);

if (objControl.test_mode)
{
    draw_text(x, y-24, round(ground));
    draw_set_color(c_red);
    draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, true);
    draw_set_color(c_white);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
