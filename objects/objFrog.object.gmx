<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprFrogIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objPlayer</parentName>
  <maskName>sprFrogMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set variables
vx_max = 3;
vy_max = 10;
///Friction &amp; gravity
air_frict = 0.05;
ground_frict = 0.3;
grav = 0.25;
grav_slid = 0.1;
///Acceleration
air_acc = 0.05;
ground_acc = 0.3;
///Jumping!
jump_height = 5;
djump_height = 3;
can_jump = true;
///Misc
facing = 1;
bounce = 0.5;
global.player_alive = true;
move_timer = 0;
enabled = false;

///Mobile controls
press = -1;
press_y = 0;
fall = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create game over screen
instance_create(0, 0, objGameOver);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mobile input
///Press to jump, hold to jump higher!
///Swipe down to fall through platforms
if (global.mobile)
{
    //Check if we've recently swiped down
    //The "fall" variable is basically a timer,
    //it makes the player fall through platforms
    //for 20 steps AFTER swiping down.
    if (fall &gt; 0)
    {
        var kDown = true;
        fall--;
    }
    else
    {
        var kDown = false;
    }
    
    
    var kJump        = false;
    var kJumpRelease = mouse_check_button_released(mb_left);
    
    var swipe_distance = 8;
    var press_time = 4;
    
    //When "press" is more than 0, the screen has been
    //touched and is being held.
    //There's a limit of 4 steps (press_time) before
    //the character jumps
    //So basically you have to hold down on the touch
    //screen for 4 steps before jumping.
    //After those 4 steps, OR after the mouse is released
    //The system checks the new mouse_y position against
    //the position at which it was pressed.
    //IF the new position is 16 pixels (swipe_distance)
    //below the pressed position, then the user has
    //swiped down, if not, they want to jump!
    //Does that make sense?!
    if (press &gt; 0)
    {
        if (mouse_check_button_released(mb_left))
        {
            press = 0;
        }
        else
        {
            press++;
            if (press &gt; press_time)
            {
                press = 0;
            }
        }
    }
    else
    {
        if (mouse_check_button_pressed(mb_left))
        {
            press = 1;
            press_y = mouse_y-view_yview;
        }
    }
    
    //This is when EITHER the touch screen is
    //released, OR the touch screen has been held
    //for 4 steps (press_time)
    //This code checks whether the user has
    //swiped down, or wants to jump
    //Afterwards, set "press" to -1 so that this
    //code is not run again (until the screen is
    //pressed again)
    if (press == 0)
    {
        diff_y = (mouse_y-view_yview)-press_y;
        if (diff_y &gt; swipe_distance)
        {
            fall = 20;
        }
        else
        {
            kJump = true;
        }
        press = -1;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard inputs
if (!global.mobile)
{
    var kDown        = keyboard_check(vk_down);
    var kJump        = keyboard_check_pressed(vk_space);
    var kJumpRelease = keyboard_check_released(vk_space);
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle inputs
if (enabled)
{
    ///To fall through semi-solid platforms
    fallthrough = kDown;
    
    var clinging = ((cling_left || cling_right) &amp;&amp; !ground);
    
    ///Jumping
    if (can_jump &gt; 0 || clinging)
    {
        if (kJump)
        {
            can_jump = 0;
            image_spd = 0.4;
            image_index = 1;
            move_jump = true;
            if (ground)
            {
                yscale = 1+bounce;
                xscale = 1-bounce;
            }
            else
            {
                yscale = 1+bounce/2;
                xscale = 1-bounce/2;
            }
            if (clinging)
            {
                move_timer = room_speed/3;
            }
        }
    }
    if (kJumpRelease)
    {
        if (vy &lt; 0)
        {
            vy *= 0.7;
        }
    }
    
    ///Automatically move right!
    ///Unless the timer is active.
    ///The timer is set when the player wall-jumps
    if (!clinging)
    {
        move_timer--;
        if (move_timer &lt; 0)
        {
            move_right = true;
            facing = 1;
        }
        else
        {
            move_right = false;
        }
    }
    else
    {
        move_right = false;
    }
}
else
{
    if (kJump)
    {
        enabled = true;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Sprites
if (ground)
{
    can_jump = 10;
    image_spd = 0.25;
    if (move_left || move_right)
    {
    switch (global.PlayerSelect)
    {
    case 1:
    sprite_index = sprFrogRun;
    break;
    case 2:
    sprite_index = sprWeiderRun;
    break;
    case 3:
    sprite_index = sprIronRun;
    break;
    }
    }
    else
    {
     switch (global.PlayerSelect)
    {
    case 1:
    sprite_index = sprFrogIdle;
    break;
    case 2:
    sprite_index = sprWeiderIdle;
    break;
    case 3:
    sprite_index = sprIronIdle;
    break;
    }
    }
}
else
{
    can_jump--;
    if (cling_left)
    {
        facing = 1;
         switch (global.PlayerSelect)
    {
    case 1:
    sprite_index = sprFrogSlide;
    break;
    case 2:
    sprite_index = sprWeiderSlider;
    break;
    case 3:
    sprite_index = sprIronSlide;
    break;
    }
        image_spd = 0.4;
        can_jump = true;
    }
    else
    if (cling_right)
    {
        facing = -1;
       switch (global.PlayerSelect)
    {
    case 1:
    sprite_index = sprFrogSlide;
    break;
    case 2:
    sprite_index = sprWeiderSlider;
    break;
    case 3:
    sprite_index = sprIronSlide;
    break;
    }
        image_spd = 0.4;
        can_jump = true;
    }
    else
    {
    switch (global.PlayerSelect)
    {
    case 1:
    sprite_index = sprFrogJump;
    break;
    case 2:
    sprite_index = sprWeiderJump;
    break;
    case 3:
    sprite_index = sprIronJump;
    break;
    }
        image_index = min(3, max(0, round(vy/3)+1));
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Approach a normal image scale
var s = objControl.game_speed;
var k = 0.08*s;
xscale = approach(xscale, 1, k);
yscale = approach(yscale, 1, k);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump on or take damage
if (other.invincible &amp;&amp; !invincible)
{
    instance_destroy();
    audio_play_sound(dead,99,false);
}
else
{
    var yy = (other.bbox_top+other.bbox_bottom*4)/5;
    if (y &lt; yy &amp;&amp; vy &gt; 0)
    {
        other.take_damage = 1;
        vy = -4;
        yscale = 1+bounce;
        xscale = 1-bounce;
    }
    else
    {
        instance_destroy();
    }
}
instance_create(0, 0, objFlash);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>9,9</point>
    <point>9,9</point>
  </PhysicsShapePoints>
</object>
